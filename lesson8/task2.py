"""
Доработать алгоритм Дейкстры (рассматривался на уроке),
чтобы он дополнительно возвращал список вершин, которые необходимо обойти.
"""
# python --version 3.9.0
from collections import deque

g = [
    [0, 0, 1, 1, 9, 0, 0, 0],
    [0, 0, 9, 4, 0, 0, 5, 0],
    [0, 9, 0, 0, 3, 0, 6, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 0, 0, 0, 5, 0],
    [0, 0, 7, 0, 8, 1, 0, 0],
    [0, 0, 0, 0, 0, 1, 2, 0],
]


def dijkstra(graph, start):
    length = len(graph)                      # количество вершин в графе
    is_visited = [False] * length            # список посещенных вершин
    cost = [float('inf')] * length           # список стоимости пути до каждой вершины
    parent = [-1] * length                   # список родительских вершин
    way = [['Пути не существует']] * length  # списко содержащий пути до вершин из вершины start

    cost[start] = 0                          # список стоимости пути до вершин из вершины start
    min_cost = 0                             # минимальная стоимость пути до вершины
    bgn = start

    while min_cost < float('inf'):
        """
        Продолжаем цикл пока минимальная стоимость меньше бесконечности
        """

        is_visited[start] = True             # отмечаем стартовую вершину, как посещенную

        for i, vertex in enumerate(graph[start]):
            """
            Пробегаем по списку вершин в отношении к вершине start
            """
            if vertex != 0 and not is_visited[i]:
                """
                Если  вершина start имеет смежную вершину и эта вершина не проверялась,
                тогда проверяем стоимость этой вершины
                """

                if cost[i] > vertex + cost[start]:
                    """
                    Если стоимость смежной вершины больше суммы стоимость пути от вершиный start
                    и стоимости самой вершины start, тогда меняем стоимость i-й вершины и добавляем
                    вершину start в список parent
                    """
                    cost[i] = vertex + cost[start]
                    parent[i] = start

        # print(f'{start}:', sep=' ')
        # print(parent)
        # print(cost)
        way[start] = deque([start])    # создаем очередь по индексу start в списке way
        finish = start                 # вспомогательная переменная равная вершине до которой ищем путь

        while parent[finish] != -1:
            """
            До тех пор пока родительская вершина не равна -1,
            добавлем в очередь вершины и меняем значение finish
            на значение вершины в списке parent по индексу finish,
            таким образом получаем путь до вершины start
            """
            way[start].appendleft(parent[finish])
            finish = parent[finish]

        min_cost = float('inf')
        for i in range(length):
            if min_cost > cost[i] and not is_visited[i]:
                min_cost = cost[i]
                start = i
    # print(way)

    # return cost
    for i in range(length):
        if cost[i] == float('inf'):
            print(f'Из вершины {bgn} в вершину {i} пути не существует')
        else:
            print(f'Вершина {i}: \nстоимость пути из вершины {bgn} равна {cost[i]}\n'
              f'Путь пройдет через вершины: {way[i]}\n')


s = int(input("От какой вершины идти:\n"))
dijkstra(g, s)

# результат работы программы
"""
От какой вершины идти:
0
Вершина 0: 
стоимость пути из вершины 0 равна 0
Путь пройдет через вершины: deque([0])

Вершина 1: 
стоимость пути из вершины 0 равна 10
Путь пройдет через вершины: deque([0, 2, 1])

Вершина 2: 
стоимость пути из вершины 0 равна 1
Путь пройдет через вершины: deque([0, 2])

Вершина 3: 
стоимость пути из вершины 0 равна 1
Путь пройдет через вершины: deque([0, 3])

Вершина 4: 
стоимость пути из вершины 0 равна 4
Путь пройдет через вершины: deque([0, 2, 4])

Вершина 5: 
стоимость пути из вершины 0 равна 6
Путь пройдет через вершины: deque([0, 2, 4, 6, 5])

Вершина 6: 
стоимость пути из вершины 0 равна 5
Путь пройдет через вершины: deque([0, 2, 4, 6])

Из вершины 0 в вершину 7 пути не существует

Process finished with exit code 0
"""